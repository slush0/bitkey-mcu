APPLICATION_VERSION := 1.0.0

OBJECTS := usb.o u2f.o messages.o storage.o trezor.o pinmatrix.o fsm.o coins.o \
	transaction.o protect.o layout2.o recovery.o reset.o signing.o crypto.o \
	ethereum.o debug.o
OBJECTS := $(addprefix $(APPLICATION)/,$(OBJECTS))

ALGORITHMS := bignum ecdsa curves secp256k1 nist256p1 ed25519-donna/ed25519 hmac \
	bip32 bip39 pbkdf2 base58 ripemd160 sha2 sha3 aescrypt aeskey aestab aes_modes
$(call add-algorithms, $(ALGORITHMS))

PROTOBUF_OBJECTS := pb_decode pb_encode messages.pb storage.pb types.pb
OBJECTS += $(QRENC_LIBRARY)/qr_encode.o \
	$(patsubst %,$(APPLICATION)/protob/%.o,$(PROTOBUF_OBJECTS))

DEBUG ?= 0
override CFLAGS += -I$(APPLICATION) \
                   -I$(APPLICATION)/protob -DPB_FIELD_16BIT=1 \
                   -DDEBUG_LINK=$(DEBUG) -DDEBUG_LOG=$(DEBUG) \
                   -DQR_MAX_VERSION=0 \
                   -DED25519_CUSTOMRANDOM=1 -DED25519_CUSTOMHASH=1 \
                   -DUSE_ETHEREUM=1 \
                   -Wno-sequence-point

FASTFLASH ?= 0
ifneq ($(FASTFLASH),0)
override CFLAGS += -DFASTFLASH
OBJECTS += $(APPLICATION)/fastflash.o

bootloader/trezor.bin: | bootloader

$(APPLICATION)/fastflash.o: CMD = $(OBJCOPY) -I binary -O elf32-littlearm -B arm \
	--rename-section .data=.rodata,alloc,load,readonly,data,contents \
	--redefine-sym _binary_bootloader_trezor_bin_end=_FASTFLASH_BLOB_END \
	--redefine-sym _binary_bootloader_trezor_bin_size=_FASTFLASH_BLOB_SIZE \
	--redefine-sym _binary_bootloader_trezor_bin_start=_FASTFLASH_BLOB_START \
	$< $@

$(APPLICATION)/fastflash.o: bootloader/trezor.bin | bootloader
	$(call pretty_cmd,BIN,$(TERM_DARK))
endif
